---
title: About
weight: 1
---

# About

HMPPS Integration API is a RESTFul API that provides a single point of entry for organisations to access data about a
person within the prison and probation services of Ministry of Justice (MOJ) such as the National Offender Management
Information System (NOMIS). It uses a Police National Computer identifier (PNC ID) for a person.

## Diagrams

The [C4 model](https://c4model.com/) is used for visualising the technical architecture of the service.

### Context diagram

The [context diagram](https://c4model.com/#SystemContextDiagram) provides a high-level overview of the current systems
that make up HMPPS Integration API as well as those that are yet to be implemented.

[![Context diagram](https://raw.githubusercontent.com/ministryofjustice/hmpps-integration-api/main/docs/diagrams/context.svg)](https://raw.githubusercontent.com/ministryofjustice/hmpps-integration-api/main/docs/diagrams/context.svg)

### Container diagram

The [container diagram](https://c4model.com/#ContainerDiagram) provides a more in-depth view of the different upstreams
APIs that are used to retrieve data from the HMPPS systems such as
the [Prison API](https://api-dev.prison.service.justice.gov.uk/swagger-ui/index.html) for NOMIS.

[![Container diagram](https://raw.githubusercontent.com/ministryofjustice/hmpps-integration-api/main/docs/diagrams/container.svg)](https://raw.githubusercontent.com/ministryofjustice/hmpps-integration-api/main/docs/diagrams/container.svg)

## API changes and versioning

As HMPPS Integration API evolves, more features will be added, and features that already exist will change. Both consumers and the MoJ must be prepared to handle these changes, and to manage them carefully.

There will broadly speaking be two kinds of changes - "non-breaking" changes, where consumers should be able to use the new version without modifying their usage, and "breaking" changes where we would expect that consumers would not be able to seamlessly use the new version.

### Non-breaking change

We would like to minimise the number of breaking changes, and where this is not possible, we will increment the API version and manage the migration.

- MoJ - must not change or remove an existing data element unless we are certain it is not in use
- MoJ - must update documentation to reflect any changes
- MoJ - may add new elements and change/remove elements that we know are not in use
- Consumers - implementation must accept new elements and changes to elements that are not in use (i.e. it must be resilient to non-breaking API changes)

### Breaking change

Where a non-breaking change is not possible, there is then a breaking change. In this case, we will increment the version of the API

- MoJ - must update documentation, and explicitly call out the change between versions
- MoJ - must distribute the new documentation as soon as practical
- MoJ - must run both versions of the API, as long as this is practical, for at least 1 month
- Consumers - must commit to moving to the new version of the API within a reasonable timescale, usually 1 month
- Depending on the size of the change, MoJ may require the Consumer to go through additional re-assurance steps

### Ongoing assurance

As part of including new functionality into the system, new processes will be available to be undertaken via the API. As these are introduced, we will ask consumers to go through further rounds of assurance, broadly similar to the initial round described above.

### URI Path

Where versioning must be implemented, it will be in the form of a path parameter:

```
https://integration-api.hmpps.service.justice.gov.uk/v1/images/123456
```

Versions will increment by major version only and no minor version updates will be supported.
